import java.util.LinkedList;
import java.util.Queue;
import java.io.*;
import java.util.*;
import java.lang.*;

class TreeNode{
    int data;
    TreeNode left;
    TreeNode right;
    TreeNode(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class Solution {
	int maxRightNode = 0;
	int minLeftNode = 0;
	void getWidth(TreeNode root, int pos){
		if(root == null){
			return;
		}
		getWidth(root.left , pos-1);
		getWidth(root.right , pos+1);

		maxRightNode = Math.max(maxRightNode,pos);
		minLeftNode = Math.min(minLeftNode,pos);
		
	}
	class Pair implements Comparable<Pair>{
		TreeNode node ;
		int pos = 0;
		Pair(TreeNode node, int pos){
			this.node = node;
			this.pos=  pos;
		}
		@Override 
        public int compareTo(Pair other) {
            if (this.pos == other.pos) {
                return this.node.data - other.node.data;
            }

            return this.pos - other.pos;
        }
	}
    List<List<Integer>> VerticalTraversal(TreeNode root) {
        // get width of the tree i.e distance between min left and max righ nodes
		getWidth(root, 0);
		int width = maxRightNode - minLeftNode;

		int level = width + 1;
		List<List<Integer>> vv = new ArrayList<>();
		for(int i=0; i<level; i++){
			vv.add(new ArrayList<>());
		}

		PriorityQueue<Pair> Ppq = new PriorityQueue<>();
		Ppq.add(new Pair(root, -minLeftNode));
		while(Ppq.size()>0){
			int size = Ppq.size();
			PriorityQueue<Pair> Cpq = new PriorityQueue<>();
			while(size-->0){
				Pair curr = Ppq.remove();

				vv.get(curr.pos).add(curr.node.data);

				if(curr.node.left!=null){
					Cpq.add(new Pair(curr.node.left, curr.pos-1));
				}
				if(curr.node.right!=null){
					Cpq.add(new Pair(curr.node.right, curr.pos+1));
				}
			}
			Ppq = Cpq;
		}
		
		return vv;
    }
}

class Main {

    static TreeNode buildTree(String str) {
        if(str.length()==0 || str.charAt(0)=='N')
            return null;

        String ip[] = str.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(ip[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            TreeNode currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.left = new TreeNode(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if(i >= ip.length)
                break;
            currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.right = new TreeNode(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static void main (String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t=Integer.parseInt(br.readLine());
        while(t > 0){
            String s = br.readLine();
            TreeNode root = buildTree(s);
            Solution ob = new Solution();
            List<List<Integer>> ans = ob.VerticalTraversal(root);
            for(int i = 0; i < ans.size(); i++) {
                for(int a : ans.get(i)) {
                    System.out.print(a + " ");
                }
                System.out.println();
            }
           // System.out.println();
            t--;
        }
    }
}
